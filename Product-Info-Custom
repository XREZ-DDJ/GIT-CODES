<script src="https://cdnjs.cloudflare.com/ajax/libs/image-map-resizer/1.0.10/js/imageMapResizer.min.js"></script>
<!-- Selector de Colores -->
<p style="font-weight: bold;">COLOR</p>
<div class="contenedor_colores">
  <!-- Diccionario de color: "NombreEspa√±ol:#HEX" -->
  {% assign color_map = '
    Negro:#000000|
    Azul:#005BD3|
    Blanco:#FFFFFF|
    Gris:#808080|
    Gris Oxford:#5B5D5F|
    Oro rosa:#B76E79|
    P√∫rpura:#A54DCF|
    Amarillo:#FFE500|
    Naranja:#FF8A00|
    Rosa:#FFC0CB|
    Cafe:#A67907|
    AZUL CIELO:#099399|
    Beige:#EAD8AB|
    Azul marino:#282099|
    Verde:#05AA3D|
    Marr√≥n:#9A5630|
    Vino:#440122|
    Rojo:#F61F1F|
    Blanco / Durazno:#E8D9CE|
    Blanco - Dorado:#D49A06|
    Blanco - Gris:#808080
      '
    | strip
  %}

  {% assign displayed_colors = '' %}
  {% for variant in product.variants %}
    {% if displayed_colors contains variant.option2 %}
      {% continue %}
    {% endif %}
    {% assign displayed_colors = displayed_colors | append: variant.option2 | append: ',' %}

    <!-- Valor por defecto si no hay match en el diccionario -->
    {% assign color_hex = '#000000' %}

    <!-- Buscar el c√≥digo hex seg√∫n variant.option2 -->
    {% assign pairs = color_map | split: '|' %}
    {% for pair in pairs %}
      {% assign parts = pair | split: ':' %}
      {% assign colorName = parts[0] | strip | downcase %}
      {% assign colorCode = parts[1] | strip %}

      {% assign variant_color_downcased = variant.option2 | downcase %}
      {% if variant_color_downcased == colorName %}
        {% assign color_hex = colorCode %}
      {% endif %}
    {% endfor %}

    <!-- Conservamos .color-item y data-color para que tu JS de tallas siga funcionando -->
    <div
      class="color-item swatch"
      data-color="{{ variant.option2 }}"
      data-variant-id="{{ variant.id }}"
    >
      <!-- Radio oculto para poder usar :checked en CSS -->
      <input
        type="radio"
        name="selected-color"
        id="color-{{ variant.id }}"
        class="color-option"
        value="{{ variant.option2 }}"
        hidden
      >
      <!-- Label con el fondo de color -->
      <label
        for="color-{{ variant.id }}"
        class="swatch-label"
        style="background-color: {{ color_hex }};"
      >
      </label>
    </div>
  {% endfor %}
</div>
<!-- Fin Selector de Colores -->

<!-- Selector tallas -->
<p style="font-weight: bold; font-family: 'work sans';">¬øCU√ÅNTAS PRENDAS POR TALLA NECESITAS?</p>
<div class="contenedor_selectores">
  {% for variant in product.variants %}
    <div class="size-item" data-color="{{ variant.option2 }}" data-variant-id="{{ variant.id }}" style="display: none;">
      <label class="size-label">
        <span class="size-name">{{ variant.option1 }}</span>
        <div class="quantity-wrapper">
          <button type="button" class="qty-btn down" data-variant-id="{{ variant.id }}">&#9650;</button>
          <!-- Flecha arriba -->
          <input
            type="number"
            name="selected-size"
            class="size-option"
            data-variant-id="{{ variant.id }}"
            data-stock="{{ variant.inventory_quantity }}"
            min="0"
            max="{{ variant.inventory_quantity }}"
            value="0"
          >
          <button type="button" class="qty-btn up" data-variant-id="{{ variant.id }}">&#9660;</button>
          <!-- Flecha abajo -->
        </div>
        <span class="stock-info">{{ variant.inventory_quantity }}pz.</span>
      </label>
    </div>
  {% endfor %}
</div>
<!-- Fin Selector tallas -->

<style>
  /*MODAL*/
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
        z-index:100;
    }
    .modal-overlay.active {
        opacity: 1;
        visibility: visible;
    }

    .modal-overlay.active .modal {
        transform: scale(1);
    }
    .modal {
        display: grid;
        grid-template-columns: 1fr 1fr;
        background: white;
        width: 90%;
        height: 85%;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        transform: scale(0.8);
        transition: transform 0.3s ease;
        top: 35px;

    }
  /*FIN MODAL*/
    .container-bordar-img {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        position:relative;
    }

    .bordar-img {
        max-width: 100%;
        max-height: 100%;
    }
    .container-bordar-content{
      padding:10px;
    }
    /* üìå ESTILOS PARA CARGA DE ARCHIVOS */
    .upload-container {
      margin-top: 15px;
      display: flex;
      justify-content: space-around;
    }
    .upload-section{
      flex-wrap: wrap;
      justify-content: space-around;
      align-items: center;
      gap: 20px;

    }
    .upload-label {
      background-color: #f00;
      color: #fff;
      padding: 10px 10px;
      border-radius: 5px;
      max-height: 42px;
      margin-right: 10px;
      }

    .upload-label:hover {
      background-color: #000;
    }

    .container-bordar-content p{
      font-size:13px;
    }
    /* ‚úÖ Vista previa de archivos */
    .preview {
      font-size: 10px;
      display: flex;
      flex-direction: column;
      height: 110px;
      width: 110px;
      align-items: center;
    }
    .preview img {
      max-width: 100px;
      max-height: 100px;
    }

    .medidas-container {
      display: flex;
      gap: 8px;
      text-align: center;
      align-items: center;
      flex-wrap: wrap;
      justify-content: center;
    }
    .medidas-container p {
      font-size: 11px;
    }
    .medidas-input {
      padding: 5px;
      border: 1px solid #ccc;
      border-radius: 4px;
      max-width: 120px;
    }
    .bordado-info{
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 20px;
      font-size: 10px;
      margin-top: 15px;
    }
    .bordado-info p {
      font-size: 10px;
    }
    .close-btn{
      background-color: #f00;
      border-radius: 5px;
      width: 150px;
      color: #ffffff;
      margin-top: 10px;
      position: absolute;
      left: 65%;
    }
  @media (max-width: 767px){
    .modal {
      grid-template-columns: none;
      grid-template-rows: 1fr 1fr;
      overflow: overlay;
    }
    .container-bordar-img {
      overflow: visible;
    }
    .upload-section{
      flex-direction: column;
      height:auto;
    }
    .medidas-container{
      flex-direction: column;
    }
    .bordado-info{
      align-items: center;
    }
    .close-btn{
      left: 0;
      justify-self: anchor-center;
      margin-top:0px;
    }

  }
</style>

<!-- Boton colapso archivos -->
<button
  id="openModal"
  class="bordar-btn"
  style="font-family: 'work sans'; font-weight:bold; text-align: center;"
>
  ¬øDesear bordar tu prenda?
</button>
<div class="modal-overlay" id="modalOverlay">
  <div class="modal">
    <div class="container-bordar-img">
      {% render 'product-bordados' %}
    </div>
    <div class="container-bordar-content">
      <p>Selecciona de la imagen el area que deseas bordar y carga tu imagen o pdf del bordado.</p>
      <div class="upload-container" id="upload-sections">
        <!-- Aqu√≠ se crear√°n din√°micamente los inputs de carga de archivos -->
      </div>
      <div class="medidas-container" id="medidas-sections">
        <!--
          <p>
            **Si necesitas otras medidas mas peque√±as, colocalas aqui. Se redimensionara tomando en cuenta tu dato mas
            grande**
          </p>
        -->
      </div>
      <div class="bordado-info">
        {% render 'product-bordados-info' %}
      </div>
      <button class="close-btn" id="closeModal">Regresar</button>
    </div>
  </div>
</div>

<script>

  //MODAL
  const openModal = document.getElementById("openModal");
  const closeModal = document.getElementById("closeModal");
  const modalOverlay = document.getElementById("modalOverlay");

  openModal.addEventListener("click", () => {
      modalOverlay.classList.add("active");
  });

  closeModal.addEventListener("click", () => {
      modalOverlay.classList.remove("active");
  });
  //FIN MODAL

  
  //SELECCION AREA
  function selectArea(area) {
    document.querySelectorAll('.upload-section').forEach(section => {
      section.style.display = 'none';
    });
    
    const selectedSection = document.getElementById(`upload-section-${area.toLowerCase()}`);
    if (selectedSection) {
        selectedSection.style.display = 'flex';
    }
    highlightArea(area);
  }
  //FIN SELECCION AREA

  
  function highlightArea(area) {
    // Contenedor principal donde est√° la imagen
    const container = document.querySelector('.container-bordar-img');
    if (!container) {
      console.error("No se encontr√≥ el contenedor para el √°rea resaltada.");
      return;
    }
  
    // Imagen dentro del contenedor
    const image = container.querySelector('img');
    if (!image) {
      console.error("No se encontr√≥ la imagen dentro del contenedor.");
      return;
    }
  
    // Buscar el √°rea seleccionada
    const selectedArea = document.querySelector(`area[alt="${area}"]`);
    if (!selectedArea) {
      console.warn(`No se encontr√≥ un √°rea con el atributo alt="${area}".`);
      return;
    }
  
    // Obtener las coordenadas del √°rea (x, y, r)
    const coords = selectedArea.coords.split(',').map(Number);
    if (coords.length !== 3) {
      console.error("Las coordenadas del √°rea no son v√°lidas para un c√≠rculo:", coords);
      return;
    }
  
    const [x, y, r] = coords;
  
    // Obtener el desplazamiento (offset) de la imagen
    const imageRect = image.getBoundingClientRect();
    const containerRect = container.getBoundingClientRect();
    
    const offsetX = imageRect.left - containerRect.left;
    const offsetY = imageRect.top - containerRect.top;
  
    console.log("Offset calculado: ", { offsetX, offsetY });
  
    // Crea o reutiliza un elemento para el resaltado
    let highlightDiv = container.querySelector('#highlight-area');
    if (!highlightDiv) {
      highlightDiv = document.createElement('div');
      highlightDiv.id = 'highlight-area';
      highlightDiv.style.position = 'absolute';
      highlightDiv.style.border = '2px solid red';
      highlightDiv.style.pointerEvents = 'none'; // No interferir con clics
      highlightDiv.style.borderRadius = '50%'; // Hacer el resaltado circular
      container.appendChild(highlightDiv);
    }
  
    // Ajusta las dimensiones y posici√≥n del contenedor
    highlightDiv.style.left = `${x - r + offsetX}px`;
    highlightDiv.style.top = `${y - r + offsetY}px`;
    highlightDiv.style.width = `${2 * r}px`;
    highlightDiv.style.height = `${2 * r}px`;
  
    console.log("Resaltado aplicado: ", {
      left: highlightDiv.style.left,
      top: highlightDiv.style.top,
      width: highlightDiv.style.width,
      height: highlightDiv.style.height,
    });
  }

  
  // Inicializar upload sections
  const areas = window.areas || []; 
  const uploadContainer = document.getElementById("upload-sections");
  uploadContainer.innerHTML = "";
  areas.forEach(area => {
  const id = area.toLowerCase().replace(/\s+/g, "-");
  const section = document.createElement("div");
  section.classList.add("upload-section");
  section.id = `upload-section-${id}`;
  section.style.display = "none"; // Ocultar por defecto
  section.innerHTML = `
    <label for="file-upload-${id}" class="upload-label">
      Seleccionar archivo para ${area}
    </label>
    <input type="file" id="file-upload-${id}" accept="image/*,.pdf" style="display: none;">
    <div id="preview-${id}" class="preview"></div>
    <div class="medidas-container">
      <p>
        **Si necesitas otras medidas mas peque√±as, colocalas aqui. Se redimensionara tomando en cuenta tu dato mas
        grande**
      </p>
      <label for="ancho-${id}" class="medidas-label">Ancho (cm):</label>
      <input type="number" id="ancho-${id}" class="medidas-input" min="0" placeholder="7">
      <label for="alto-${id}" class="medidas-label">Alto (cm):</label>
      <input type="number" id="alto-${id}" class="medidas-input" min="0" placeholder="7">
    </div>
  `;
  uploadContainer.appendChild(section);

    // Vincular el input a handleFileUpload
    const fileInput = section.querySelector(`#file-upload-${id}`);
    fileInput.addEventListener("change", function(){
      handleFileUpload(id, this);
      contarArchivosSubidos(); // recalcular en cada cambio
    });
  });
  
    window.onload = function () {
    imageMapResize(); // Hace que el mapa sea responsivo
  };
</script>

<!-- Fin Boton colapso archivos -->

<!-- Bot√≥n Agregar al Carrito -->
<button id="add-to-cart-btn" class="add-to-cart-btn" disabled>Agregar al carrito</button>
<!-- Fin Bot√≥n Agregar al Carrito -->

<!--
  ============================================
         SCRIPT √öNICO: L√ìGICA UNIFICADA
  ============================================
-->
<script>

/* -----------------------------------------
   1) FUNCIONES GLOBALES (FUERA DEL DOM LOAD)
----------------------------------------- */

// ‚úÖ Autenticar usuario (Firebase an√≥nimo)
function authenticateUser() {
  return firebase.auth().signInAnonymously()
    .then((userCredential) => {
      console.log("‚úÖ Usuario autenticado con UID:", userCredential.user.uid);
      return userCredential.user;
    })
    .catch((error) => {
      console.error("‚ùå Error al autenticar:", error);
      alert("No se pudo autenticar con Firebase. Int√©ntalo de nuevo.");
      throw error;
    });
}

// ‚úÖ Subir archivo a Firebase
function handleFileUpload(position, input) {
  const previewDiv = document.getElementById(`preview-${position}`);
  previewDiv.innerHTML = ""; // Limpiar previsualizaci√≥n anterior

  if (input.files.length > 0) {
    const file = input.files[0];
    const maxSize = 15 * 1024 * 1024; // 15MB

    if (file.size > maxSize) {
      alert("üö® El archivo seleccionado es demasiado grande. M√°ximo permitido: 15MB.");
      input.value = "";
      return;
    }

    if (!file.type.startsWith("image/") && file.type !== "application/pdf") {
  alert("üö® Solo se permiten im√°genes y archivos PDF.");
  input.value = "";
  return;
}

    // Subir a Firebase
    authenticateUser().then(() => {
      const storage = firebase.storage();
      const storageRef = storage.ref(`bordados/${position}/${file.name}`);
      const uploadTask = storageRef.put(file);

      uploadTask.on("state_changed",
        function (snapshot) {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          console.log(`Subiendo ${position}: ${progress}%`);
        },
        function (error) {
          console.error("Error al subir:", error);
          alert("Error al subir el archivo.");
        },
        function () {
          uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {
            console.log(`Archivo disponible en: ${downloadURL}`);

            // Limpiar mensaje
            previewDiv.innerHTML = "";
            // Mostrar previsualizaci√≥n
            if (file.type.startsWith("image/")) {
              const img = document.createElement("img");
              img.src = downloadURL;
              previewDiv.appendChild(img);
            } else if (file.type === "application/pdf") {
              previewDiv.innerHTML = `<a href="${downloadURL}" target="_blank">Ver PDF</a>`;
            }
            /*
            // Enlace de descarga
            const downloadLink = document.createElement("a");
            downloadLink.href = downloadURL;
            downloadLink.textContent = "Descargar archivo";
            downloadLink.target = "_blank";
            previewDiv.appendChild(downloadLink);
            */
            
          });
        }
      );
    });
  }
}

/* -----------------------------------------
   FUNCI√ìN PARA FILTRAR GALER√çA POR COLOR
----------------------------------------- */
function filterGalleryByColor(selectedColor) {
  // Seleccionamos todos los contenedores de im√°genes en la galer√≠a
  const mediaItems = document.querySelectorAll('.product-gallery__media');

  mediaItems.forEach((media) => {
    // Buscar imagen, video o model-viewer
    const imgOrVideo = media.querySelector('img, video, model-viewer');
    if (!imgOrVideo) {
      // Si no hay imagen/video, la mostramos siempre (ajusta a tu preferencia)
      media.hidden = false;
      return;
    }

    // Leer el alt
    const altText = imgOrVideo.getAttribute('alt') || '';

    // Si el alt no contiene "#Color_", consideramos que es gen√©rica y la mostramos
    if (!altText.includes('#Color_')) {
      media.hidden = false;
      return;
    }

    // Extraemos el color tras "#Color_"
    const splitted = altText.split('#Color_');
    let altColor = splitted[1] ? splitted[1].trim() : '';

    // Comparamos en min√∫sculas
    if (altColor.toLowerCase() === selectedColor.toLowerCase()) {
      media.hidden = false;
    } else {
      media.hidden = true;
    }
  });
}

/* -----------------------------------------
   2) DOMContentLoaded: L√ìGICA PRINCIPAL
----------------------------------------- */
document.addEventListener("DOMContentLoaded", function () {
  console.log("üöÄ DOMContentLoaded: Iniciando todo...");

  // 2.1) Variables principales
  const addToCartButton = document.getElementById("add-to-cart-btn");
  const uploadContainer = document.getElementById("upload-sections");
  const colorOptions     = document.querySelectorAll(".color-item");
  const sizeOptions      = document.querySelectorAll(".size-item");
  const sizeInputs       = document.querySelectorAll(".size-option");

  // ID del producto BORDADO
  const bordadoId = 40551847821470;
  const productType = "{{ product.type }}";
  console.log("Tipo de producto detectado:", productType);
  // Para contar archivos subidos
  let archivosSubidos  = 0;
  let cantidadBordado  = 0;
  
  // 2.4) Funci√≥n para contar archivos subidos
  function contarArchivosSubidos() {
    // Capturamos todos los input[type='file'] que se generaron
    const allFileInputs = document.querySelectorAll(".upload-container input[type='file']");
    archivosSubidos = 0;
    allFileInputs.forEach(fi => {
      if (fi.files.length > 0) {
        archivosSubidos++;
      }
    });

    // Excluimos el primer archivo gratis
    cantidadBordado = (archivosSubidos > 1) ? (archivosSubidos - 1) : 0;
    console.log(`üìÅ Archivos subidos: ${archivosSubidos} | üé® Bordados a cobrar: ${cantidadBordado}`);
  }

  // 2.5) L√≥gica de color y tallas
  function selectColorAndSize(colorItem) {
    let selectedColor = colorItem.getAttribute("data-color");
    colorOptions.forEach(opt => opt.classList.remove("color-selected"));
    colorItem.classList.add("color-selected");

    // Mostrar solo tallas del color
    sizeOptions.forEach(s => {
      s.style.display = (s.getAttribute("data-color") === selectedColor) ? "flex" : "none";
    });

    // Seleccionar autom√°ticamente la primera talla
    const firstAvailable = document.querySelector(`.size-item[data-color="${selectedColor}"] input`);
    if (firstAvailable) {
      firstAvailable.checked = true;
      addToCartButton.setAttribute("data-selected-variant", firstAvailable.getAttribute("data-variant-id"));
      addToCartButton.disabled = false;
    } else {
      addToCartButton.disabled = true;
    }

    // ‚úÖ Filtrar galer√≠a de im√°genes por color
    filterGalleryByColor(selectedColor);
  }

  // Seleccionar primer color
  if (colorOptions.length > 0) {
    selectColorAndSize(colorOptions[0]);
  }
  // Evento click en color
  colorOptions.forEach(opt => {
    opt.addEventListener("click", function(){
      selectColorAndSize(this);
    });
  });

  // Evento change en tallas
  sizeInputs.forEach(inp => {
    inp.addEventListener("change", function () {
      let variantId = this.getAttribute("data-variant-id");
      addToCartButton.setAttribute("data-selected-variant", variantId);
    });
  });
3
  // Control stock y flechas
  sizeInputs.forEach(inp => {
    inp.addEventListener("input", function(){
      let maxStock = parseInt(this.getAttribute("data-stock"), 10);
      let val = parseInt(this.value, 10);
      if (val > maxStock) {
        this.value = maxStock;
        alert(`Solo puedes seleccionar hasta ${maxStock} unidades.`);
      }
      if (val < 0) {
        this.value = 0;
      }
    });
  });

  document.querySelectorAll(".qty-btn").forEach(btn => {
    btn.addEventListener("click", function(){
      let variantId = this.getAttribute("data-variant-id");
      let inp = document.querySelector(`.size-option[data-variant-id="${variantId}"]`);
      let maxStock = parseInt(inp.getAttribute("data-stock"), 10);
      let currentVal= parseInt(inp.value, 10) || 0;

      if (this.classList.contains("down") && currentVal < maxStock) {
        inp.value = currentVal + 1;
      } else if (this.classList.contains("up") && currentVal > 0) {
        inp.value = currentVal - 1;
      }
    });
  });

  // üîπ Funci√≥n para calcular total de piezas
  function getTotalPiezas(items) {
    let total = 0;
    items.forEach(i => {
      total += i.quantity;
    });
    return total;
  }


  function obtenerMedidasPorArea() {
    const medidas = {};
    const areas = document.querySelectorAll(".upload-section");
    areas.forEach(area => {
      const id = area.id.replace("upload-section-", "");
      const ancho = document.getElementById(`ancho-${id}`)?.value || 7; // Valor predeterminado
      const alto = document.getElementById(`alto-${id}`)?.value || 7;
      medidas[id] = { ancho, alto };
    });
    return medidas;
  }

  // 2.6) Evento "Agregar al carrito"
  addToCartButton.addEventListener("click", function(){
    console.log("üü¢ 'Agregar al carrito' clickeado");

    // Recalcular archivos subidos
    contarArchivosSubidos();
    // Obtener medidas personalizadas
    const medidasPorArea = obtenerMedidasPorArea();
    

    // Construir array (items sin bordado)
    let newCart = [];
    sizeInputs.forEach(inpt => {
      let qty = parseInt(inpt.value, 10);
      if (qty > 0) {
        let variantId = inpt.getAttribute("data-variant-id");
        let item = {
          id: variantId,
          quantity: qty,
          properties: {}
        };

        // Opcional: Incluir propiedades de archivos en cada prenda
        const allFileInputs = document.querySelectorAll(".upload-container input[type='file']");
        allFileInputs.forEach(fi => {
          if (fi.files.length > 0) {
            let pos = fi.id.replace("file-upload-", "");
            item.properties[`Archivo - ${pos}`] = fi.files[0].name;
            // Recuperar URL
            let prevDiv = document.getElementById(`preview-${pos}`);
            let linkEl  = prevDiv.querySelector("img");
            if (linkEl) {
              item.properties[`URL - ${pos}`] = linkEl.src;
            }
            // Asociar medidas espec√≠ficas de esta √°rea
            
              item.properties[`Archivo - ${pos}`] = fi.files[0].name;
              item.properties[`Medidas - ${pos}`] = `Ancho: ${medidasPorArea[pos].ancho} cm, Alto: ${medidasPorArea[pos].alto} cm`;
            
          }
        });

        newCart.push(item);
      }
    });

    if (newCart.length === 0) {
      alert("Selecciona al menos una prenda antes de agregar al carrito.");
      return;
    }

    // Calcular total de prendas
    let totalPiezas = getTotalPiezas(newCart);
    console.log("üßÆ Total de prendas:", totalPiezas);

    // Multiplicar bordados x el total de prendas
    let bordadosExtras = cantidadBordado * totalPiezas;
    if (bordadosExtras > 0) {
      newCart.push({
        id: bordadoId,
        quantity: bordadosExtras
      });
      console.log(`‚ûï Bordado agregado: ${bordadosExtras} (porque subieron ${archivosSubidos} archivos y se seleccion√≥ ${totalPiezas} prendas)`);
    }

    console.log("üõç Enviando productos al carrito...", newCart);
    fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ items: newCart })
    })
    .then(response => {
      if (!response.ok) throw new Error("Error al agregar al carrito");
      return response.json();
    })
    .then(resp => {
      console.log("‚úÖ Productos agregados con √©xito", resp);
      // üîΩüîΩüîΩ AQU√ç EL CAMBIO üîΩüîΩüîΩ
      // En lugar de location.assign("/cart"), recargamos con ?openCartDrawer=true
      window.location.href = window.location.pathname + '?openCartDrawer=true';
    })
    .catch(err => {
      console.error("‚ùå Error al agregar productos al carrito", err);
      alert("Hubo un problema al agregar los productos. Int√©ntalo de nuevo.");
    });
  });

  // 2.7) Manejo openCartDrawer
  const params = new URLSearchParams(window.location.search);
  if (params.get('openCartDrawer') === 'true') {
    const cartDrawer = document.getElementById('cart-drawer');
    if (cartDrawer) {
      cartDrawer.setAttribute('open', '');
    }
    // Limpia el par√°metro de la URL
    window.history.replaceState({}, document.title, window.location.pathname);
  }

});
</script>

<!--
  ============================================
         TUS ESTILOS (MANT√âN IGUAL)
  ============================================
-->

<style>
    /* ‚úÖ Estilos del acorde√≥n */
  .bordar-btn {
    background-color: black;
    color: white;
    border: 1px solid #ccc;
    padding: 10px;
    width: 100%;
    text-align: left;
    cursor: pointer;
    transition: background 0.3s;
  }

  .bordar-btn.open {
    background-color: red;
  }



    /* üìå CONTENEDOR DE COLORES */
  * Contenedor del swatch (mantenemos .color-item) */
    .swatch {
      display: inline-block;
      position: relative;
      margin: 5px;
    }

    /* C√≠rculo de color */
    .swatch-label {
      width: 30px;
      height: 30px;
      border-radius: 50%; /* c√≠rculo */
      display: inline-block;
      border: 2px solid transparent;
      cursor: pointer;
      transition: border 0.2s, transform 0.2s;
    }

    /* Efecto hover */
    .swatch-label:hover {
      border-color: #ccc;
      transform: scale(1.05);
    }

    /* Resaltar el swatch si el radio est√° checked */
    .color-option:checked + .swatch-label {
      border-color: #bcbcbc;
      transform: scale(1.1);
      box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.5);
    }

  .contenedor_colores {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 25px;
  }

  .color-item {
      display: flex;
      flex-direction: column;
      cursor: pointer;
      transition: background-color 0.3s ease-in-out;
  }

  .color-preview {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: inline-block;
    border: 2px solid #ddd;
    cursor: pointer;
  }

  .color-option {
    padding: 5px 10px;
    max-width:80px;
    border: 1px solid black;
  }
  .color-option:hover {
    border: 1px solid white;
    color: white;
    box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);
  }

  input[type="radio"].color-option {
    display: none;
  }

  input[type="radio"].color-option:checked + .color-preview {
    border: 2px solid black;
  }

  /* üìå CONTENEDOR DE SELECTORES DE TALLA */
  .contenedor_selectores {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .size-item {
    display: none; /* Se activar√° con JS */
  }

  .size-label {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    background: #f5f5f5;
    border-radius: 5px;
    padding: 5px;
    width: 60px;
    font-size: 14px;
    font-weight: bold;
    color: #333;
  }

  .size-name {
    font-size: 12px;
    font-weight: bold;
    margin-bottom: 3px;
  }

  /* üìå CONTENEDOR DE INPUT + BOTONES UP/DOWN */
  .quantity-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }

  .size-option {
    width: 40px;
    height: 30px;
    text-align: center;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: #fff;
    font-size: 16px;
    font-weight: bold;
    appearance: textfield;
  }

  .qty-btn {
    width: 100%;
    height: 15px;
    background: #ddd;
    border: none;
    cursor: pointer;
    font-size: 12px;
    line-height: 12px;
    text-align: center;
  }

  .qty-btn.up {
    border-radius: 0 0 4px 4px;
  }

  .qty-btn.down {
    border-radius: 4px 4px 0 0;
  }

  .size-option::-webkit-inner-spin-button,
  .size-option::-webkit-outer-spin-button {
    appearance: none;
    margin: 0;
  }

  .stock-info {
    font-size: 12px;
    color: #666;
    margin-top: 3px;
  }

  /* üìå BOT√ìN AGREGAR AL CARRITO */
  .add-to-cart-btn {
    background-color: #f00;
    color: #fff;
    padding: 15px 30px;
    border: none;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
  }

  .add-to-cart-btn:hover {
    background-color: #000;
    color: #fff;
  }

  .add-to-cart-btn:disabled {
    background-color: gray;
    cursor: not-allowed;
  }
</style>
