<!-- Selector de Colores -->
<p style="font-weight: bold;">COLOR</p>
<div class="contenedor_colores">
  <!-- Diccionario de color: "NombreEspa√±ol:#HEX" -->
  {% assign color_map = '
    Negro:#000000|
    Azul:#005BD3|
    Blanco:#FFFFFF|
    Gris:#808080|
    Gris Oxford:#5B5D5F|
    Oro rosa:#B76E79|
    P√∫rpura:#A54DCF|
    Amarillo:#FFE500|
    Naranja:#FF8A00|
    Rosa:#FFC0CB|
    Cafe:#A67907|
    AZUL CIELO: #099399|
    Azul Celeste: #6fafc8|
    Azul Jaspe: #7793bb|
    Beige:#EAD8AB|
    Azul marino:#295780|
    Verde:#05AA3D|
    Verde Oliva: #443e1e|
    Marr√≥n:#9A5630|
    Vino:#440122|
    Rojo:#F61F1F|
    Blanco / Rojo : repeating-linear-gradient(90deg, rgb(246 31 31), rgb(246 31 31) 4px, white 3px, white 7px)|
    Blanco / Azul : repeating-linear-gradient(90deg, rgba(27, 34, 63, 1), rgba(27, 34, 63, 1) 4px, white 3px, white 7px)|
    Blanco / Durazno: linear-gradient(90deg,rgba(232, 217, 206, 1) 50%, rgba(255, 255, 255, 1) 0%)|
    Blanco - Dorado: linear-gradient(90deg,rgba(212, 154, 6, 1) 50%, rgba(255, 255, 255, 1) 0%)|
    Blanco - Gris: linear-gradient(90deg,rgba(130, 130, 130, 1) 50%, rgba(255, 255, 255, 1) 50%)|
    Rayado: repeating-linear-gradient(90deg, #000000, #000000 4px, #ffffff 3px, #ffffff 6px)|
    Rayado Gris / Rojo: linear-gradient(90deg, #808080 0%, #808080 40%, #cd0000 40%, #cd0000 70%, #ffffff 70%, #ffffff 100%)
    '
    | strip
  %}

  {% assign displayed_colors = '' %}
  {% for variant in product.variants %}
    {% if displayed_colors contains variant.option2 %}
      {% continue %}
    {% endif %}
    {% assign displayed_colors = displayed_colors | append: variant.option2 | append: ',' %}

    <!-- Valor por defecto si no hay match en el diccionario -->
    {% assign color_hex = '#A54DCF' %}

    <!-- Buscar el c√≥digo hex seg√∫n variant.option2 -->
    {% assign pairs = color_map | split: '|' %}
    {% for pair in pairs %}
      {% assign parts = pair | split: ':' %}
      {% assign colorName = parts[0] | strip | downcase %}
      {% assign colorCode = parts[1] | strip %}

      {% assign variant_color_downcased = variant.option2 | downcase %}
      {% if variant_color_downcased == colorName %}
        {% assign color_hex = colorCode %}
      {% endif %}
    {% endfor %}

    <!-- Conservamos .color-item y data-color para que tu JS de tallas siga funcionando -->
    <div
      class="color-item swatch"
      data-color="{{ variant.option2 }}"
      data-variant-id="{{ variant.id }}"
    >
      <!-- Radio oculto para poder usar :checked en CSS -->
      <input
        type="radio"
        name="selected-color"
        id="color-{{ variant.id }}"
        class="color-option"
        value="{{ variant.option2 }}"
        hidden
      >
      <!-- Label con el fondo de color -->
      <label
        for="color-{{ variant.id }}"
        class="swatch-label"
        style="background: {{ color_hex }};"
      >
      </label>
    </div>
  {% endfor %}
</div>
<!-- Fin Selector de Colores -->

<!-- Selector tallas -->
<p style="font-weight: bold; font-family: 'work sans';">
  ¬øCU√ÅNTAS PRENDAS POR TALLA NECESITAS?
</p>

<div class="contenedor_selectores">
{% for variant in product.variants %}
  {% assign stock = variant.inventory_quantity %}
  <div
    class="size-item"
    data-variant-id="{{ variant.id }}"
    data-inventory-item-id="{{ variant.inventory_item_id }}"
    data-size="{{ variant.option1 }}"
    data-color="{{ variant.option2 }}"
    style="display: none;"
  >
      <label class="size-label">
        <span class="size-name">{{ variant.option1 }}</span>

        {% if variant.available %}
          <!-- Variante con stock: tu selector num√©rico -->
          <div class="quantity-wrapper">
            <button type="button" class="qty-btn down" data-variant-id="{{ variant.id }}">&#9650;</button>
            <input 
              type="number"
              name="selected-size"
              class="size-option"
              data-variant-id="{{ variant.id }}"
              data-stock="{{ variant.inventory_quantity }}"
              min="0"
              max="{{ variant.inventory_quantity }}"
              value="0"
            >
            <button type="button" class="qty-btn up" data-variant-id="{{ variant.id }}">&#9660;</button>
          </div>
          <span class="stock-info">{{ variant.inventory_quantity }} pz.</span>
        {% else %}
          <!-- Variante agotada: bot√≥n de notificar -->
          <button
            type="button"
            class="notify-btn"
            aria-label="Av√≠same cuando repongan talla {{ variant.option1 }}"
          >
            <span class="material-symbols-outlined">notification_add</span>
          </button>

        {% endif %}

      </label>
    </div>
  {% endfor %}
</div>
{%- comment -%}
  Mostrar instrucci√≥n solo si hay variantes sin stock
{%- endcomment -%}
{% assign sold_out_variants = product.variants | where: "available", false %}
{% if sold_out_variants.size > 0 %}
  <p class="notify-instruction" style="margin-top:12px; font-size:14px; color:#555;">
    Pulsa la campanita y te avisamos al reponer stock.
  </p>
{% endif %}


<!-- Fin Selector tallas -->


<!-- Boton colapso archivos -->
{% if context != 'quick_buy' %}
<div class="accordion" style="padding-top:25px;">
  <button class="accordion-btn" onclick="toggleAccordion()" style="font-family: 'work sans'; font-weight:bold; text-align: center;">¬øDesear bordar tu prenda?</button>
  <div class="accordion-content">
    <p class="instructions">
      El bordado ser√° realizado en el color del que subas tu imagen. Si deseas otro color o tama√±o, 
      ind√≠calo en los comentarios en el carrito de compras. (Formatos permitidos: PDF, JPEG, PNG)
    </p>
    <div class="upload-container" id="upload-sections">
      <!-- Aqu√≠ se crear√°n din√°micamente los inputs de carga de archivos -->
    </div>
  </div>
</div>
<!-- Fin Boton colapso archivos -->
  {% endif %}

<!-- Bot√≥n Agregar al Carrito -->
<button id="add-to-cart-btn" class="add-to-cart-btn" disabled> 
  Agregar al carrito
</button>
<!-- Fin Bot√≥n Agregar al Carrito -->


<!-- Formulario oculto para actualizar tags de cliente -->
<form
  id="update-tags-form"
  action="/account"
  method="post"
  style="display:none;"
>
  <input type="hidden" name="form_type" value="customer_update" />
  <input type="hidden" name="utf8" value="‚úì" />

  <!-- Campos obligatorios del cliente -->
  <input
    type="hidden"
    name="customer[email]"
    value="{{ customer.email }}"
  />
  <input
    type="hidden"
    name="customer[first_name]"
    value="{{ customer.first_name }}"
  />
  <input
    type="hidden"
    name="customer[last_name]"
    value="{{ customer.last_name }}"
  />

  <!-- Aqu√≠ pondremos la lista de tags -->
  <input
    type="hidden"
    name="customer[tags]"
    id="customer-tags-input"
  />
</form>



<!-- ============================================
       SCRIPT √öNICO: L√ìGICA UNIFICADA
============================================ -->


<script>

/* -----------------------------------------
   1) FUNCIONES GLOBALES (FUERA DEL DOM LOAD)
----------------------------------------- */
// ‚úÖ Acorde√≥n sin Bootstrap
function toggleAccordion() {
  const accordion = document.querySelector(".accordion-content");
  const button = document.querySelector(".accordion-btn");
  if (accordion.style.display === "block") {
    accordion.style.display = "none";
    button.textContent = "¬øDesear bordar tu prenda?";
    button.classList.remove("open");
  } else {
    accordion.style.display = "block";
    button.textContent = "No bordar";
    button.classList.add("open");
  }
}

// ‚úÖ Autenticar usuario (Firebase an√≥nimo)
function authenticateUser() {
  return firebase.auth().signInAnonymously()
    .then((userCredential) => {
      console.log("‚úÖ Usuario autenticado con UID:", userCredential.user.uid);
      return userCredential.user;
    })
    .catch((error) => {
      console.error("‚ùå Error al autenticar:", error);
      alert("No se pudo autenticar con Firebase. Int√©ntalo de nuevo.");
      throw error;
    });
}

// ‚úÖ Subir archivo a Firebase
function handleFileUpload(position, input, dataName) {
  const previewDiv = document.getElementById(`preview-${position}`);
  previewDiv.innerHTML = ""; // Limpiar previsualizaci√≥n anterior

  if (input.files.length > 0) {
    const file = input.files[0];
    const maxSize = 15 * 1024 * 1024; // 15MB

    if (file.size > maxSize) {
      alert("üö® El archivo seleccionado es demasiado grande. M√°ximo permitido: 15MB.");
      input.value = "";
      return;
    }

    if (!file.type.startsWith("image/") && file.type !== "application/pdf") {
  alert("üö® Solo se permiten im√°genes y archivos PDF.");
  input.value = "";
  return;
}

    // Subir a Firebase
    authenticateUser().then(() => {
      const storage = firebase.storage();
      const storageRef = storage.ref(`bordados/${position}/${file.name}`);
      const uploadTask = storageRef.put(file);

      uploadTask.on("state_changed",
        function (snapshot) {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          console.log(`Subiendo ${position}: ${progress}%`);
        },
        function (error) {
          console.error("Error al subir:", error);
          alert("Error al subir el archivo.");
        },
        function () {
          uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {
            console.log(`Archivo disponible en: ${downloadURL}`);

            // Limpiar mensaje
            previewDiv.innerHTML = "";
            // Mostrar previsualizaci√≥n
            if (file.type.startsWith("image/")) {
              const img = document.createElement("img");
              img.src = downloadURL;
              img.style.maxWidth = "100px";
              img.style.marginTop = "10px";
              previewDiv.appendChild(img);
            } else if (file.type === "application/pdf") {
              previewDiv.innerHTML = `<a href="${downloadURL}" target="_blank">Ver PDF</a>`;
            }
            // Enlace de descarga
            const downloadLink = document.createElement("a");
            downloadLink.href = downloadURL;
            downloadLink.textContent = "Descargar archivo";
            downloadLink.target = "_blank";
            downloadLink.style.display = "block";
            downloadLink.style.marginTop = "10px";
            previewDiv.appendChild(downloadLink);

            // Actualizar variable hayPersonalizacion a true si se sube un archivo
            hayPersonalizacion = true;

                        // Generar propiedades con formato {name, value} incluyendo "Bordado"
            let properties = [
              {
                "name": "Personalizaci√≥n",
                "value": hayPersonalizacion ? "S√≠" : "No" // Si hay archivo, "S√≠", si no, "No"
              }
            ];

            // Agregar propiedad de bordado con "Bordado" al principio del data-name
            if (dataName) {
              properties.push({
                "name": `Bordado ${dataName}`, // Concatenamos "Bordado" antes del nombre
                "value": downloadURL // La URL del archivo cargado
              });
            }

            // Aqu√≠ agregar√≠as el JSON de las propiedades al carrito o lo que necesites
            console.log("Propiedades generadas:", properties);
            // Ejemplo de c√≥mo a√±adir al carrito:
            item.properties = properties; // Aqu√≠ agregamos las propiedades generadas al objeto del producto
            
          });
        }
      );
    });
  }
}

  // --------------------------------------
//  Funciones globales de ‚ÄúNotificarme‚Äù
// --------------------------------------

  
// 1) Abre el modal de notificaci√≥n
function abrirModalNotificacion(variantId, inventoryItemId, size, color) {
    const customerId = window.customer?.id
                    || window.ShopifyAnalytics?.meta?.page?.customerId;
    if (!customerId) {
      alert("Debes iniciar sesi√≥n para solicitar notificaciones.");
      return;
    }

    // Evita duplicar el modal
    if (document.getElementById("notify-modal")) return;
    const modal = document.createElement("div");
    modal.id = "notify-modal";
    modal.innerHTML = `
      <div class="modal-backdrop"></div>
      <div class="modal-content">
        <h2>Te avisaremos cuando repongan stock</h2>
        <p><strong>Producto:</strong> ${productTitle}</p>
        <p><strong>Color:</strong> ${color}</p>
        <p><strong>Talla:</strong> ${size}</p>
        <button id="notify-submit">Confirmar notificaci√≥n</button>
      </div>
    `;
    document.body.appendChild(modal);

    // Cerrar al click en backdrop
    modal.addEventListener("click", (ev) => {
      if (ev.target.id === "notify-modal"
       || ev.target.classList.contains("modal-backdrop")) {
        modal.remove();
      }
    });

    // Enviar a Make
    modal.querySelector("#notify-submit").onclick = () => {
      const payload = {
        customerId,
        inventoryItemId,
        variantId,
        size,
        color,
        productName: productTitle
      };
      console.log("üöÄ Enviando payload:", payload);

      // Construye la URL con query-params
      const url = new URL("https://hook.us2.make.com/tw839hw3c7e8ovjv158s3tty939licxd");
      Object.entries(payload).forEach(([k, v]) =>
        url.searchParams.append(k, v)
      );

      // GET sin CORS
      fetch(url, { method: "GET", mode: "no-cors" })
        .then(() => {
          modal.querySelector(".modal-content").innerHTML =
            "<p>¬°Listo! Te avisaremos en cuanto repongan stock.</p>";
        })
        .catch((err) => {
          console.error("‚ùå Error al notificar:", err);
          alert("No se pudo enviar tu solicitud. Intenta de nuevo m√°s tarde.");
        });
    };
  }

// 2) Delegaci√≥n global para capturar cualquier click en una campanita,
//    tanto en la p√°gina normal como dentro del Quick-Buy.
document.body.addEventListener("click", function(e) {
  const btn = e.target.closest(
    "#quick-buy-modal-content .notify-btn, .contenedor_selectores .notify-btn"
  );
  if (!btn) return;

  const container = btn.closest(".size-item");
  if (!container) return;

  abrirModalNotificacion(
    container.dataset.variantId,
    container.dataset.inventoryItemId,
    container.dataset.size,
    container.dataset.color
  );
});

/* -----------------------------------------
   FUNCI√ìN PARA FILTRAR GALER√çA POR COLOR
----------------------------------------- */
function filterGalleryByColor(selectedColor) {
  // Seleccionamos todos los contenedores de im√°genes en la galer√≠a
  const mediaItems = document.querySelectorAll('.product-gallery__media');

  mediaItems.forEach((media) => {
    // Buscar imagen, video o model-viewer
    const imgOrVideo = media.querySelector('img, video, model-viewer');
    if (!imgOrVideo) {
      // Si no hay imagen/video, la mostramos siempre (ajusta a tu preferencia)
      media.hidden = false;
      return;
    }

    // Leer el alt
    const altText = imgOrVideo.getAttribute('alt') || '';

    // Si el alt no contiene "#Color_", consideramos que es gen√©rica y la mostramos
    if (!altText.includes('#Color_')) {
      media.hidden = false;
      return;
    }

    // Extraemos el color tras "#Color_"
    const splitted = altText.split('#Color_');
    let altColor = splitted[1] ? splitted[1].trim() : '';

    // Comparamos en min√∫sculas
    if (altColor.toLowerCase() === selectedColor.toLowerCase()) {
      media.hidden = false;
    } else {
      media.hidden = true;
    }
  });
}

const productTitle = "{{ product.title | escape }}";
  
/* -----------------------------------------
   2) DOMContentLoaded: L√ìGICA PRINCIPAL
----------------------------------------- */
document.addEventListener("DOMContentLoaded", function () {
  console.log("üöÄ DOMContentLoaded: Iniciando todo...");

  // 2.1) Variables principales
  const addToCartButton = document.getElementById("add-to-cart-btn");
  const uploadContainer = document.getElementById("upload-sections");
  const colorOptions     = document.querySelectorAll(".color-item");
  const sizeOptions      = document.querySelectorAll(".size-item");
  const sizeInputs       = document.querySelectorAll(".size-option");

  // ID del producto BORDADO
  const bordadoId = 40551847821470;

  // Para contar archivos subidos
  let archivosSubidos  = 0;
  let cantidadBordado  = 0;

  // 2.2) Lista de tipos de producto y posiciones
  const productTypes = {
    "CAMISA": ["Frontal Izquierdo", "Frontal Derecho", "Espalda"],
    "superior": ["Frontal Izquierdo", "Frontal Derecho", "Espalda"],
    "BATA DOCTOR": ["Frontal Izquierdo", "Frontal Derecho", "Espalda"],
    "PLAYERA": ["Frontal Izquierdo", "Frontal Derecho", "Manga Izquierda", "Manga Derecha", "Espalda"],
    "SUDADERA": ["Frontal Izquierdo", "Frontal Derecho", "Manga Izquierda", "Manga Derecha", "Espalda"],
    "POLO": ["Frontal Izquierdo", "Frontal Derecho", "Manga Izquierda", "Manga Derecha", "Espalda"],
    "CHAMARRA EJECUTIVA": ["Frontal Izquierdo", "Frontal Derecho", "Manga Izquierda", "Manga Derecha", "Espalda"],
    "CHAMARRA CASUAL": ["Frontal Izquierdo", "Frontal Derecho", "Manga Izquierda", "Manga Derecha", "Espalda"],
    "FILIPINA DOCTOR": ["Frontal Izquierdo", "Frontal Derecho"],
    "FILIPINA CAMARISTA": ["Frontal Izquierdo", "Frontal Derecho"],
    "FILIPINA LIMPIEZA": ["Frontal Izquierdo", "Frontal Derecho"],
    "inferior": ["Trasero Izquierdo", "Trasero Derecho"],
    "PANTALON EJECUTIVO": ["Trasero Izquierdo", "Trasero Derecho"],
    "BERMUDAS": ["Trasero Izquierdo", "Trasero Derecho"],
    "PANTALON INDUSTRIAL": ["Trasero Izquierdo", "Trasero Derecho"],
    "PANTALON CASUAL": ["Trasero Izquierdo", "Trasero Derecho"],
    "PANTALON CHEF": ["Trasero Izquierdo", "Trasero Derecho"],
    "PANTALON DOCTOR": ["Trasero Izquierdo", "Trasero Derecho"],
    "PANTALON CAMARISTA": ["Trasero Izquierdo", "Trasero Derecho"],
    "PANTALON LIMPIEZA": ["Trasero Izquierdo", "Trasero Derecho"],
    "FILIPINA CHEF": ["Cuello Izquierdo", "Cuello Derecho", "Frontal"],
    "ACCESORIO": ["Frontal"],
    "individual": ["Frontal"],
    "MANDIL": ["Frontal"]
  };

  // 2.3) Generar din√°micamente los inputs de archivo seg√∫n el tipo
  const productType = "{{ product.type }}";
  console.log("Tipo de producto detectado:", productType);

  // Variable para verificar si hay personalizaci√≥n
  let hayPersonalizacion = false;

  if (productTypes[productType]) {
    productTypes[productType].forEach(position => {
      const id = position.toLowerCase().replace(/\s+/g, "-");
      const section = document.createElement("div");
      section.classList.add("upload-section");

          // Crear el input y el label con el 'data-name'
    section.innerHTML = `
      <label for="file-upload-${id}" class="upload-label" data-name="${position}">
        <i class="bi bi-upload"></i> ${position}
      </label>
      <input type="file" id="file-upload-${id}" accept=".png,.jpg,.jpeg,.pdf,image/png,image/jpeg" style="display: none;">
      <div id="preview-${id}" class="preview"></div>
    `;
    uploadContainer.appendChild(section);

      // Vincular el input a handleFileUpload
      const fileInput = section.querySelector(`#file-upload-${id}`);
      const label = section.querySelector("label");
      fileInput.addEventListener("change", function(){
        handleFileUpload(id, this, label.getAttribute('data-name'));
        contarArchivosSubidos(); // recalcular en cada cambio
      });
    });
  }

  // 2.4) Funci√≥n para contar archivos subidos
  function contarArchivosSubidos() {
    // Capturamos todos los input[type='file'] que se generaron
    const allFileInputs = document.querySelectorAll(".upload-container input[type='file']");
    archivosSubidos = 0;
    allFileInputs.forEach(fi => {
      if (fi.files.length > 0) {
        archivosSubidos++;
      }
    });
    // Excluimos el primer archivo gratis
    cantidadBordado = (archivosSubidos > 1) ? (archivosSubidos - 1) : 0;
    console.log(`üìÅ Archivos subidos: ${archivosSubidos} | üé® Bordados a cobrar: ${cantidadBordado}`);
  }

  // 2.5) L√≥gica de color y tallas
  function selectColorAndSize(colorItem) {
    let selectedColor = colorItem.getAttribute("data-color");
    colorOptions.forEach(opt => opt.classList.remove("color-selected"));
    colorItem.classList.add("color-selected");

    // Mostrar solo tallas del color
    sizeOptions.forEach(s => {
      s.style.display = (s.getAttribute("data-color") === selectedColor) ? "flex" : "none";
    });

    // Seleccionar autom√°ticamente la primera talla
    const firstAvailable = document.querySelector(`.size-item[data-color="${selectedColor}"] input`);
    if (firstAvailable) {
      firstAvailable.checked = true;
      addToCartButton.setAttribute("data-selected-variant", firstAvailable.getAttribute("data-variant-id"));
      addToCartButton.disabled = false;
    } else {
      addToCartButton.disabled = true;
    }

    // ‚úÖ Filtrar galer√≠a de im√°genes por color
    filterGalleryByColor(selectedColor);
  }

  // Seleccionar primer color
  if (colorOptions.length > 0) {
    selectColorAndSize(colorOptions[0]);
  }
  // Evento click en color
  colorOptions.forEach(opt => {
    opt.addEventListener("click", function(){
      selectColorAndSize(this);
    });
  });

  // Evento change en tallas
  sizeInputs.forEach(inp => {
    inp.addEventListener("change", function () {
      let variantId = this.getAttribute("data-variant-id");
      addToCartButton.setAttribute("data-selected-variant", variantId);
    });
  });

  // Control stock y flechas
  sizeInputs.forEach(inp => {
    inp.addEventListener("input", function(){
      let maxStock = parseInt(this.getAttribute("data-stock"), 10);
      let val = parseInt(this.value, 10);
      if (val > maxStock) {
        this.value = maxStock;
        alert(`Solo puedes seleccionar hasta ${maxStock} unidades.`);
      }
      if (val < 0) {
        this.value = 0;
      }
    });
  });

  document.querySelectorAll(".qty-btn").forEach(btn => {
    btn.addEventListener("click", function(){
      let variantId = this.getAttribute("data-variant-id");
      let inp = document.querySelector(`.size-option[data-variant-id="${variantId}"]`);
      let maxStock = parseInt(inp.getAttribute("data-stock"), 10);
      let currentVal= parseInt(inp.value, 10) || 0;

      if (this.classList.contains("down") && currentVal < maxStock) {
        inp.value = currentVal + 1;
      } else if (this.classList.contains("up") && currentVal > 0) {
        inp.value = currentVal - 1;
      }
    });
  });

  // üîπ Funci√≥n para calcular total de piezas
  function getTotalPiezas(items) {
    let total = 0;
    items.forEach(i => {
      total += i.quantity;
    });
    return total;
  }

  // 2.5.1) Delegaci√≥n para ‚ÄúNotificarme‚Äù cuando stock = 0
document.querySelector('.contenedor_selectores')
  .addEventListener('click', e => {
    const btn = e.target.closest('.notify-btn');
    if (!btn) return;

    // 1) Busca el DIV .size-item m√°s cercano
    const container = btn.closest('.size-item');
    if (!container) return; // seguridad

    // 2) Ahora s√≠, lee tu atributo
    const inventoryItemId = container.dataset.inventoryItemId || "";
    const variantId       = container.dataset.variantId;
    const size            = container.dataset.size;
    const color           = container.dataset.color;

    console.log({ variantId, inventoryItemId, size, color });
    abrirModalNotificacion(variantId, inventoryItemId, size, color);
  });


// Funci√≥n que abre el modal de suscripci√≥n
function abrirModalNotificacion(variantId, inventoryItemId, size, color) {
    const customerId = window.customer?.id
                    || window.ShopifyAnalytics?.meta?.page?.customerId;
    if (!customerId) {
      alert("Debes iniciar sesi√≥n para solicitar notificaciones.");
      return;
    }

    // Evita duplicar el modal
    if (document.getElementById("notify-modal")) return;
    const modal = document.createElement("div");
    modal.id = "notify-modal";
    modal.innerHTML = `
      <div class="modal-backdrop"></div>
      <div class="modal-content">
        <h2>Te avisaremos cuando repongan stock</h2>
        <p><strong>Producto:</strong> ${productTitle}</p>
        <p><strong>Color:</strong> ${color}</p>
        <p><strong>Talla:</strong> ${size}</p>
        <button id="notify-submit">Confirmar notificaci√≥n</button>
      </div>
    `;
    document.body.appendChild(modal);

    // Cerrar al click en backdrop
    modal.addEventListener("click", (ev) => {
      if (ev.target.id === "notify-modal"
       || ev.target.classList.contains("modal-backdrop")) {
        modal.remove();
      }
    });

    // Enviar a Make
    modal.querySelector("#notify-submit").onclick = () => {
      const payload = {
        customerId,
        inventoryItemId,
        variantId,
        size,
        color,
        productName: productTitle
      };
      console.log("üöÄ Enviando payload:", payload);

      // Construye la URL con query-params
      const url = new URL("https://hook.us2.make.com/tw839hw3c7e8ovjv158s3tty939licxd");
      Object.entries(payload).forEach(([k, v]) =>
        url.searchParams.append(k, v)
      );

      // GET sin CORS
      fetch(url, { method: "GET", mode: "no-cors" })
        .then(() => {
          modal.querySelector(".modal-content").innerHTML =
            "<p>¬°Listo! Te avisaremos en cuanto repongan stock.</p>";
        })
        .catch((err) => {
          console.error("‚ùå Error al notificar:", err);
          alert("No se pudo enviar tu solicitud. Intenta de nuevo m√°s tarde.");
        });
    };
  }



  // 2.6) Evento "Agregar al carrito"
  addToCartButton.addEventListener("click", function(){
    console.log("üü¢ 'Agregar al carrito' clickeado");

    // Recalcular archivos subidos
    contarArchivosSubidos();

    // Construir array (items sin bordado)
    let newCart = [];
    sizeInputs.forEach(inpt => {
      let qty = parseInt(inpt.value, 10);
      if (qty > 0) {
        let variantId = inpt.getAttribute("data-variant-id");
        let item = {
          id: variantId,
          quantity: qty,
          properties: {}
        };

        // Opcional: Incluir propiedades de archivos en cada prenda
        const allFileInputs = document.querySelectorAll(".upload-container input[type='file']");
        allFileInputs.forEach(fi => {
          if (fi.files.length > 0) {
            let pos = fi.id.replace("file-upload-", "");

            // Recuperar URL del archivo subido
            let prevDiv = document.getElementById(`preview-${pos}`);
            let linkEl = prevDiv.querySelector("a");
            if (linkEl) {
            // Solo agregamos la URL al objeto properties usando la posici√≥n como clave
            item.properties[`Bordado ${pos}`] = linkEl.href;
            }
          }
        });

        newCart.push(item);
      }
    });

    if (newCart.length === 0) {
      alert("Selecciona al menos una prenda antes de agregar al carrito.");
      return;
    }

    // Calcular total de prendas
    let totalPiezas = getTotalPiezas(newCart);
    console.log("üßÆ Total de prendas:", totalPiezas);

    // Multiplicar bordados x el total de prendas
    let bordadosExtras = cantidadBordado * totalPiezas;
    if (bordadosExtras > 0) {
      newCart.push({
        id: bordadoId,
        quantity: bordadosExtras
      });
      console.log(`‚ûï Bordado agregado: ${bordadosExtras} (porque subieron ${archivosSubidos} archivos y se seleccion√≥ ${totalPiezas} prendas)`);
    }

    console.log("üõç Enviando productos al carrito...", newCart);
    fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ items: newCart })
    })
    .then(response => {
      if (!response.ok) throw new Error("Error al agregar al carrito");
      return response.json();
    })
    .then(resp => {
      console.log("‚úÖ Productos agregados con √©xito", resp);
      // üîΩüîΩüîΩ AQU√ç EL CAMBIO üîΩüîΩüîΩ
      // En lugar de location.assign("/cart"), recargamos con ?openCartDrawer=true
      window.location.href = window.location.pathname + '?openCartDrawer=true';
    })
    .catch(err => {
      console.error("‚ùå Error al agregar productos al carrito", err);
      alert("Hubo un problema al agregar los productos. Int√©ntalo de nuevo.");
    });
  });

  // 2.7) Manejo openCartDrawer
  const params = new URLSearchParams(window.location.search);
  if (params.get('openCartDrawer') === 'true') {
    const cartDrawer = document.getElementById('cart-drawer');
    if (cartDrawer) {
      cartDrawer.setAttribute('open', '');
    }
    // Limpia el par√°metro de la URL
    window.history.replaceState({}, document.title, window.location.pathname);
  }

});

  // Quick buy

  console.log("Producto Info Custom snippet cargado.");

  // Funci√≥n principal que encapsula toda la l√≥gica de product-info-custom

// --------------------------------------
//  Handler para ‚ÄúNotificarme‚Äù (campanita)
// --------------------------------------
  function onNotifyClick(e) {
  console.log('üî• onNotifyClick disparado sobre:', e.target);
  const btn = e.target.closest('.notify-btn');
  if (!btn) return;
  const container = btn.closest('.size-item');
  if (!container) return;
  const { variantId, inventoryItemId, size, color } = container.dataset;
  abrirModalNotificacion(variantId, inventoryItemId, size, color);
}

  
  function initProductInfoCustom() {
    try {
      console.log("Iniciando product-info-custom");

      // Elementos principales: aseg√∫rate de que existan en el HTML
      const colorOptions = document.querySelectorAll('.color-item');
      const sizeOptions = document.querySelectorAll('.size-item');
      const addToCartButton = document.getElementById("add-to-cart-btn");

      if (!colorOptions.length) {
        console.warn("No se encontraron elementos con clase 'color-item'.");
      }
      if (!sizeOptions.length) {
        console.warn("No se encontraron elementos con clase 'size-item'.");
      }
      if (!addToCartButton) {
        console.warn("No se encontr√≥ el bot√≥n de agregar al carrito (#add-to-cart-btn).");
      }

      // Funci√≥n para actualizar el estado del bot√≥n "Agregar al carrito"
      function updateAddToCartButtonState() {
        const sizeInputs = document.querySelectorAll('.size-option');
        let totalSelected = 0;
        sizeInputs.forEach(inp => {
          totalSelected += parseInt(inp.value, 10) || 0;
        });
        if (addToCartButton) {
          addToCartButton.disabled = (totalSelected <= 0);
          console.log("Total prendas seleccionadas:", totalSelected, "Bot√≥n disabled:", addToCartButton.disabled);
        }
      }

      // Funci√≥n para validar que el valor ingresado en cada input de tallas no supere el stock m√°ximo
      function validateStock() {
        const sizeInputs = document.querySelectorAll('.size-option');
        sizeInputs.forEach(inp => {
          inp.addEventListener("input", function() {
            const maxStock = parseInt(this.getAttribute("data-stock"), 10);
            let currentVal = parseInt(this.value, 10) || 0;
            if (currentVal > maxStock) {
              console.log(`Valor ingresado (${currentVal}) supera stock m√°ximo (${maxStock}). Ajustando...`);
              this.value = maxStock;
            }
            updateAddToCartButtonState();
          });
        });
      }

      // Funci√≥n para seleccionar un color y mostrar las tallas asociadas
      function selectColorAndSize(colorItem) {
        const selectedColor = colorItem.getAttribute("data-color");
        console.log("Color seleccionado:", selectedColor);
        // Quitar clase de selecci√≥n de todos y agregarla al elemento clicado
        colorOptions.forEach(opt => opt.classList.remove("color-selected"));
        colorItem.classList.add("color-selected");

        // Mostrar solo las tallas correspondientes al color seleccionado
        sizeOptions.forEach(s => {
          s.style.display = (s.getAttribute("data-color") === selectedColor) ? "flex" : "none";
        });

        // Seleccionar autom√°ticamente la primera talla disponible del color seleccionado
        const firstAvailable = document.querySelector(`.size-item[data-color="${selectedColor}"] input`);
        if (firstAvailable) {
          firstAvailable.checked = true;
          if (addToCartButton) {
            addToCartButton.setAttribute("data-selected-variant", firstAvailable.getAttribute("data-variant-id"));
          }
        }
        updateAddToCartButtonState();

        // Si tienes una funci√≥n para filtrar la galer√≠a por color, se puede llamar aqu√≠:
        if (typeof filterGalleryByColor === "function") {
          filterGalleryByColor(selectedColor);
        }
      }

      // Inicializar la selecci√≥n de color: se selecciona el primero por defecto y se asignan eventos
      if (colorOptions.length > 0) {
        selectColorAndSize(colorOptions[0]);
        colorOptions.forEach(opt => {
          opt.addEventListener("click", function() {
            selectColorAndSize(this);
          });
        });
      }

      // Asignar evento "change" a cada input de tallas para actualizar la selecci√≥n y el bot√≥n
      const sizeInputs = document.querySelectorAll('.size-option');
      sizeInputs.forEach(inp => {
        inp.addEventListener("change", function() {
          const variantId = this.getAttribute("data-variant-id");
          console.log("Talla seleccionada, variante:", variantId);
          if (addToCartButton) {
            addToCartButton.setAttribute("data-selected-variant", variantId);
          }
          updateAddToCartButtonState();
        });
      });

      // Validar stock en los inputs de tallas
      validateStock();

      // Evento para el bot√≥n "Agregar al carrito"
      if (addToCartButton) {
        addToCartButton.addEventListener("click", function() {
          updateAddToCartButtonState();
          const totalSelected = Array.from(document.querySelectorAll('.size-option')).reduce(
            (acc, inp) => acc + (parseInt(inp.value, 10) || 0), 0
          );
          if (totalSelected <= 0) {
            alert("Selecciona al menos una prenda antes de agregar al carrito.");
            return;
          }
          const selectedVariant = this.getAttribute("data-selected-variant");
          console.log("Agregar al carrito clickeado. Variant seleccionado:", selectedVariant);
          // Aqu√≠ coloca la l√≥gica para agregar el producto al carrito, por ejemplo:
          // fetch("/cart/add.js", { method: "POST", body: JSON.stringify({ id: selectedVariant, quantity: totalSelected }) });
        });
      }

      // Funci√≥n para generar los botones din√°micos de bordado
      function generateEmbroideryButtons() {
        // Mapeo de tipos de producto a posiciones para bordado. Agrega m√°s tipos seg√∫n necesites.
        const productTypes = {
          "CAMISA": ["Frontal Izquierdo", "Frontal Derecho", "Espalda"],
          "PLAYERA": ["Frontal Izquierdo", "Frontal Derecho", "Manga Izquierda", "Manga Derecha", "Espalda"]
        };

        // Se espera que inyectes el tipo de producto en el body, por ejemplo:
        // <body data-product-type="{{ product.type }}">
        const productType = document.body.getAttribute("data-product-type") || "";
        const uploadContainer = document.getElementById("upload-sections");
        if (!uploadContainer) {
          console.warn("No se encontr√≥ el contenedor 'upload-sections' para bordado.");
          return;
        }
        uploadContainer.innerHTML = ""; // Limpiar contenido previo

        if (productTypes[productType]) {
          productTypes[productType].forEach(position => {
            const id = position.toLowerCase().replace(/\s+/g, "-");
            const section = document.createElement("div");
            section.classList.add("upload-section");
            section.innerHTML = `
              <label for="file-upload-${id}" class="upload-label">
                <i class="bi bi-upload"></i> ${position}
              </label>
              <input type="file" id="file-upload-${id}" accept="image/*,.pdf" style="display: none;">
              <div id="preview-${id}" class="preview"></div>
            `;
            uploadContainer.appendChild(section);
            const fileInput = section.querySelector(`#file-upload-${id}`);
            fileInput.addEventListener("change", function() {
              console.log("Archivo seleccionado para:", position);
              // Aqu√≠ coloca tu l√≥gica para manejar la carga de archivos (por ejemplo, a Firebase)
            });
          });
        } else {
          console.log("No se generaron botones de bordado para el tipo de producto:", productType);
        }
      }

      // Ejecutar la generaci√≥n de botones din√°micos de bordado
      generateEmbroideryButtons();

    // ‚Äî‚Äî‚Äî‚Äî‚Äî Enlazo NOTIFY-BTN dentro del Quick-Buy ‚Äî‚Äî‚Äî‚Äî‚Äî
    const qbContainer = document.querySelector('#quick-buy-modal-content .contenedor_selectores');
console.log('qbContainer encontrado en Quick-Buy:', qbContainer);
if (qbContainer) {
  qbContainer.removeEventListener('click', onNotifyClick);
  qbContainer.addEventListener('click', onNotifyClick);
  console.log("qbContainer encontrado en Quick-Buy:", qbContainer);
} else {
  console.warn('No se encontr√≥ .contenedor_selectores dentro de #quick-buy-modal-content');
}

    } catch (error) {
      console.error("Error en initProductInfoCustom:", error);
    }
  }

  // Utilizamos un MutationObserver para detectar cuando se carga el contenido din√°mico (quick-buy-modal-content)
const observer = new MutationObserver((mutations) => {
  for (const m of mutations) {
    for (const node of m.addedNodes) {
      if (
        node.nodeType === 1 &&
        (node.id === 'quick-buy-modal-content' ||
         node.querySelector('#quick-buy-modal-content'))
      ) {
        console.log("Quick-Buy abierto, inicializando l√≥gica‚Ä¶");
        initProductInfoCustom();
        return; // dejamos vivo el observer
      }
    }
  }
});
observer.observe(document.body, { childList: true, subtree: true });

  setTimeout(function() {
    console.warn("Despu√©s de 5 segundos no se encontr√≥ 'quick-buy-modal-content'. Verifica que el ID sea correcto.");
  }, 5000);



  
</script>


<!-- ============================================
       TUS ESTILOS (MANT√âN IGUAL)
============================================ -->

<style>
  /* ‚úÖ Estilos del acorde√≥n */

.notify-btn span:hover {
  color: red;
}

/* Contenedor principal del modal */
#notify-modal {
  position: fixed;
  inset: 0;
  z-index: 10010;
  font-family: 'work sans', sans-serif;
}


/* Fondo semi-transparente */
#notify-modal .modal-backdrop {
  position: absolute;
  inset: 0;
  background: rgba(0, 0, 0, 0.5);
}

/* Caja del contenido */
#notify-modal .modal-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: #fff;
  width: 90%;
  max-width: 400px;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  text-align: center;
}

/* T√≠tulo */
#notify-modal .modal-content h2 {
  margin: 0 0 15px;
  font-size: 1.25em;
  color: #333;
}

/* Texto descriptivo */
#notify-modal .modal-content p {
  margin: 5px 0;
  color: #555;
}

/* Input de correo */
#notify-modal #notify-email {
  width: 100%;
  padding: 8px 10px;
  margin: 12px 0;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 1em;
}

/* Botones */
#notify-modal button {
  margin: 8px 4px 0;
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  font-size: 0.95em;
  cursor: pointer;
  transition: background 0.2s;
}

/* Bot√≥n Enviar */
#notify-modal #notify-submit {
  background-color: #000;
  color: #fff;
    border:1px solid black;

}
#notify-modal #notify-submit:hover {
  background-color: #fff;
  border:1px solid black;
  color: #000;
}

/* Bot√≥n Cancelar */
#notify-modal #notify-close {
  color: #dc3545;
}
  
.accordion {
  margin-bottom: 15px;
}

.accordion-btn {
  background-color: black;
  color: white;
  border: 1px solid #ccc;
  padding: 10px;
  width: 100%;
  text-align: left;
  cursor: pointer;
  transition: background 0.3s;
}

.accordion-btn.open {
  background-color: red;
}

.accordion-content {
  display: none;
  padding: 10px;
  border: 1px solid #ccc;
  background: #f9f9f9;
}

/* ‚úÖ Contenedor de botones de carga */
.upload-container {
  display: flex;
  flex-wrap: wrap; /* Evita que los elementos se vayan a otra l√≠nea */
  gap: 15px; /* Espaciado entre los botones */
  justify-content: center; /* Centra los elementos horizontalmente */
  align-items: center; /* Alineaci√≥n vertical */
  overflow-x: auto; /* Permite desplazamiento horizontal si hay muchos botones */
}

.upload-section {
  flex: 0 1 auto; /* Ajusta el tama√±o de cada secci√≥n */
  display: flex;
  flex-direction: column;
  align-items: center;
  min-width: 120px; /* Ancho m√≠nimo de cada bot√≥n */
}

/* ‚úÖ Bot√≥n de carga de archivos */
.upload-label {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  
  text-align: center;
  white-space: nowrap; /* Evita que el texto se divida */
}

.upload-label:hover {
  background-color: #000;
}

/* ‚úÖ Vista previa de archivos */
.preview {
  margin-top: 10px;
  font-size: 14px;
}

  /* üìå CONTENEDOR DE COLORES */
* Contenedor del swatch (mantenemos .color-item) */
  .swatch {
    display: inline-block;
    position: relative;
    margin: 5px;
  }

  /* C√≠rculo de color */
  .swatch-label {
    width: 30px;
    height: 30px;
    border-radius: 50%; /* c√≠rculo */
    display: inline-block;
    border: 2px solid transparent;
    cursor: pointer;
    transition: border 0.2s, transform 0.2s;
  }

  /* Efecto hover */
  .swatch-label:hover {
    border-color: #ccc;
    transform: scale(1.05);
  }

  /* Resaltar el swatch si el radio est√° checked */
  .color-option:checked + .swatch-label {
    border-color: #bcbcbc;
    transform: scale(1.1);
    box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.5);
  }
  
.contenedor_colores {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-bottom: 25px;
}

.color-item {
    display: flex;
    flex-direction: column;
    cursor: pointer;
    transition: background-color 0.3s ease-in-out;
}

.color-preview {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  display: inline-block;
  border: 2px solid #ddd;
  cursor: pointer;
}

  .color-option {
    padding: 5px 10px;
    max-width:80px;
    border: 1px solid black;
  }
  .color-option:hover {
    border: 1px solid white;
    color: white;
    box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);
  }

input[type="radio"].color-option {
  display: none;
}

input[type="radio"].color-option:checked + .color-preview {
  border: 2px solid black;
}

/* üìå CONTENEDOR DE SELECTORES DE TALLA */
.contenedor_selectores {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.size-item {
  display: none; /* Se activar√° con JS */
}

.size-label {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  background: #f5f5f5;
  border-radius: 5px;
  padding: 5px;
  width: 60px;
  font-size: 14px;
  font-weight: bold;
  color: #333;
}

.size-name {
  font-size: 12px;
  font-weight: bold;
  margin-bottom: 3px;
}

/* üìå CONTENEDOR DE INPUT + BOTONES UP/DOWN */
.quantity-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
}

.size-option {
  width: 40px;
  height: 30px;
  text-align: center;
  border: 1px solid #ccc;
  border-radius: 4px;
  background: #fff;
  font-size: 16px;
  font-weight: bold;
  appearance: textfield;
}

.qty-btn {
  width: 100%;
  height: 15px;
  background: #ddd;
  border: none;
  cursor: pointer;
  font-size: 12px;
  line-height: 12px;
  text-align: center;
}

.qty-btn.up {
  border-radius: 0 0 4px 4px;
}

.qty-btn.down {
  border-radius: 4px 4px 0 0;
}

.size-option::-webkit-inner-spin-button,
.size-option::-webkit-outer-spin-button {
  appearance: none;
  margin: 0;
}

.stock-info {
  font-size: 12px;
  color: #666;
  margin-top: 3px;
}

/* üìå BOT√ìN AGREGAR AL CARRITO */
.add-to-cart-btn {
  background-color: #f00;
  color: #fff;
  padding: 15px 30px;
  border: none;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  width: 100%;
}

.add-to-cart-btn:hover {
  background-color: #000;
  color: #fff;
}

.add-to-cart-btn:disabled {
  background-color: gray;
  cursor: not-allowed;
}

/* üìå ESTILOS PARA CARGA DE ARCHIVOS */
.upload-container {
  display: flex;
  flex-direction: row;
  align-items: center;
  margin-top: 15px;
  flex-wrap: wrap;
}

.upload-label {
  background-color: #f00;
  color: #fff;
  padding: 10px 10px;
  border-radius: 5px;
  cursor: pointer;
  font-weight: bold;
}

.upload-label:hover {
  background-color: #000;
}

.preview {
  margin-top: 10px;
  font-size: 14px;
}
</style>




