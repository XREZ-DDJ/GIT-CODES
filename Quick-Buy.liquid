{%- capture product_form_id -%}product-form-quick-buy-{{ product.id }}-{{ section.id }}{%- endcapture -%}

<template id="quick-buy-content">
  <p class="h5" slot="header">{{ 'product.general.choose_options' | t }}</p>
  <div class="quick-buy-modal__content">
    <product-rerender id="quick-buy-modal-content" observe-form="{{ product_form_id }}" data-loaded="true">
      <script>
        document.addEventListener("DOMContentLoaded", function() {
          setTimeout(() => {
            let quickBuyModal = document.getElementById("quick-buy-modal-content");
            if (quickBuyModal) {
              quickBuyModal.setAttribute("data-loaded", "true");
            }
          }, 500);
        });
      </script>
      <dialog-close-button class="contents">
        <button type="button" class="quick-buy-modal__close-button sm-max:hidden">
          <span class="sr-only">{{ 'general.accessibility.close' | t }}</span>
          {%- render 'icon' with 'close' -%}
        </button>
      </dialog-close-button>
      
      <div class="quick-buy-modal__gallery-wrapper">
        {%- if product.media.size > 0 -%}
          {%- render 'product-gallery',
              product: product,
              product_form_id: product_form_id,
              desktop_layout: 'carousel_dots',
              mobile_controls: 'arrows',
              enable_media_autoplay: section.settings.enable_media_autoplay,
              enable_video_looping: section.settings.enable_video_looping,
              enable_image_zoom: false
          -%}
        {%- endif -%}

      </div>
      
      <div class="quick-buy-modal__info-wrapper">
        <div class="debug-info-custom">
          <a href="{{ product.url }}" class="product-title h4">{{ product.title }}</a>
  {%- if product.selected_or_first_available_variant != nil -%}
    <div class="price-large">
      {% render 'price-list', product: product, variant: product.selected_or_first_available_variant, hide_unit_price: true, context: 'card' %}
    </div>
  {%- endif -%}
          {%- render 'product-info-beta', product: product, product_form_id: product_form_id, context: 'quick_buy' -%}
        </div>
        <a href="{{ product.url }}" class="quick-buy-modal__view-more link sm-max:hidden">{{ 'product.general.view_details' | t }}</a>
      </div>
    </product-rerender>
  </div>
  
  <!-- SCRIPT EXTRA: Lógica para plus/minus y agregar al carrito (múltiples variantes) -->
  <script>
    console.log("Quick Buy: Script extra cargado.");
    
    function initQuickBuyExtraLogic() {
      try {
        console.log("Quick Buy: Iniciando lógica extra...");
        
        // Selecciona los botones de incremento/decremento y el botón de agregar
        const qtyButtons = document.querySelectorAll('#quick-buy-modal-content .qty-btn');
        const addCartBtn = document.getElementById("add-to-cart-btn");
        
        if (!qtyButtons.length) {
          console.warn("Quick Buy: No se encontraron botones qty-btn.");
        }
        if (!addCartBtn) {
          console.warn("Quick Buy: No se encontró el botón #add-to-cart-btn.");
        }
        
        function updateCartState() {
          let total = 0;
          document.querySelectorAll('#quick-buy-modal-content .size-option').forEach(function(input) {
            total += parseInt(input.value, 10) || 0;
          });
          console.log("Quick Buy: Total prendas seleccionadas =", total);
        }
        
        qtyButtons.forEach(function(btn) {
          btn.addEventListener('click', function() {
            // Busca el input en el contenedor más cercano (.quantity-wrapper)
            var input = this.parentElement.querySelector('.size-option');
            if (!input) {
              console.warn("Quick Buy: No se encontró el input en el contenedor del botón.");
              return;
            }
            const stock = parseInt(input.getAttribute('data-stock'), 10);
            let current = parseInt(input.value, 10) || 0;
            if (this.classList.contains('down')) {
              if (current < stock) { input.value = current + 1; }
            } else if (this.classList.contains('up')) {
              if (current > 0) { input.value = current - 1; }
            }
            input.dispatchEvent(new Event('change', { bubbles: true }));
            updateCartState();
          });
        });

        
        
        // Botón "Agregar al carrito": recorre TODOS los inputs y crea un array de items
        addCartBtn.addEventListener('click', function() {
          let items = [];
          document.querySelectorAll('#quick-buy-modal-content .size-option').forEach(function(input) {
            let qty = parseInt(input.value, 10) || 0;
            if (qty > 0) {
              let variantId = input.getAttribute("data-variant-id");
              items.push({ id: variantId, quantity: qty });
            }
          });
          if (items.length === 0) {
            alert("Selecciona al menos una prenda antes de agregar al carrito.");
            return;
          }
          console.log("Quick Buy: Items a agregar al carrito:", items);
          fetch("/cart/add.js", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
            },
            body: JSON.stringify({ items: items })
          })
          .then(function(response) {
            if (!response.ok) throw new Error("Error al agregar al carrito");
            return response.json();
          })
          .then(function(data) {
            console.log("Quick Buy: Productos agregados al carrito:", data);
            // Recarga la página con el query parameter para que el tema abra el drawer
            window.location.href = window.location.pathname + '?openCartDrawer=true';
          })
          .catch(function(error) {
            console.error("Quick Buy: Error al agregar productos al carrito:", error);
            alert("Hubo un problema al agregar los productos. Inténtalo de nuevo.");
          });
        });

        
        
        console.log("Quick Buy: Eventos plus/minus y add-to-cart asignados.");
      } catch (e) {
        console.error("Quick Buy: Error en la lógica extra ->", e);
      }
    }
    
    function runQuickBuyExtraLogic() {
      var qbContent = document.getElementById("quick-buy-modal-content");
      if (qbContent) {
        console.log("Quick Buy: 'quick-buy-modal-content' encontrado. Ejecutando init extra.");
        initQuickBuyExtraLogic();
      } else {
        var observer = new MutationObserver(function(mutations, obsInstance) {
          mutations.forEach(function(mutation) {
            mutation.addedNodes.forEach(function(node) {
              if (node.nodeType === Node.ELEMENT_NODE && node.id === "quick-buy-modal-content") {
                console.log("Quick Buy: Se detectó 'quick-buy-modal-content'. Ejecutando init extra.");
                initQuickBuyExtraLogic();
                obsInstance.disconnect();
              }
            });
          });
        });
        observer.observe(document.body, { childList: true, subtree: true });
        setTimeout(function() {
          console.warn("Quick Buy: No se detectó 'quick-buy-modal-content' tras 5 segundos para extra logic.");
        }, 5000);
      }
    }
    
    if(document.readyState !== "loading"){
      runQuickBuyExtraLogic();
    } else {
      document.addEventListener("DOMContentLoaded", runQuickBuyExtraLogic);
    }
  </script>


  <style>
.price-large,
.price-large * {
  color: #FF0000 !important;
  font-size: 24px !important;
}


  </style>
  
</template>
